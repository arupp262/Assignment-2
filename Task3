import java.io.*;
import java.util.*;

class JobWithArrival implements Comparable<JobWithArrival> {
    int id, time, arrival;

    JobWithArrival(int id, int time, int arrival) {
        this.id = id;
        this.time = time;
        this.arrival = arrival;
    }

    @Override
    public int compareTo(JobWithArrival other) {
        if (this.time == other.time) {
            return Integer.compare(this.arrival, other.arrival);
        }
        return Integer.compare(this.time, other.time);
    }
}

public class Task3Scheduler {

    public static void main(String[] args) throws IOException {
        PriorityQueue<JobWithArrival> pq = new PriorityQueue<>();
        BufferedReader reader = new BufferedReader(new FileReader("task3-input.txt"));

        List<JobWithArrival> jobList = new ArrayList<>();
        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(" ");
            int jobId = Integer.parseInt(parts[0]);
            int jobTime = Integer.parseInt(parts[1]);
            int jobArrival = Integer.parseInt(parts[2]);
            jobList.add(new JobWithArrival(jobId, jobTime, jobArrival));
        }

        Collections.sort(jobList, Comparator.comparingInt(j -> j.arrival));

        int currentTime = 0, totalTime = 0, completionTime = 0;
        int index = 0;

        System.out.print("Execution order: [");
        while (index < jobList.size() || !pq.isEmpty()) {
            while (index < jobList.size() && jobList.get(index).arrival <= currentTime) {
                pq.add(jobList.get(index));
                index++;
            }

            if (!pq.isEmpty()) {
                JobWithArrival job = pq.poll();
                currentTime += job.time;
                totalTime += job.time;
                completionTime += currentTime;
                System.out.print(job.id + (index == jobList.size() && pq.isEmpty() ? "" : ", "));
            } else {
                currentTime = jobList.get(index).arrival;
            }
        }
        System.out.println("]");
        System.out.println("Average completion time: " + (double) completionTime / jobList.size());
    }
}
